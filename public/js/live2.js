// Generated by CoffeeScript 1.2.1-pre
(function() {
  var Agent, AgentCallLogController, AgentController, AgentDetailController, AgentStateLogController, AgentStatusLogController, Agents, Call, Queue, QueueController, initializeIsotope, p, socket, statusOrStateToClass,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  p = function() {
    var _ref;
    return (_ref = window.console) != null ? typeof _ref.debug === "function" ? _ref.debug.apply(_ref, arguments) : void 0 : void 0;
  };

  socket = null;

  statusOrStateToClass = function(prefix, str) {
    if (str) {
      return prefix + str.toLowerCase().replace(/\W+/g, "-").replace(/^-+|-+$/g, "");
    }
  };

  initializeIsotope = function(elt) {
    return elt.isotope({
      itemSelector: '.agent',
      layoutMode: 'fitRows',
      getSortData: {
        username: function(e) {
          return e.find('.username').text();
        },
        extension: function(e) {
          return e.find('.extension').text();
        },
        status: function(e) {
          var extension, order, s;
          s = e.find('.status').text();
          order = (function() {
            switch (s) {
              case 'Available':
                return 0.7;
              case 'Available (On Demand)':
                return 0.8;
              case 'On Break':
                return 0.9;
              case 'Logged Out':
                return 1.0;
            }
          })();
          extension = e.find('.extension').text();
          return parseFloat("" + order + extension);
        },
        idle: function(e) {
          var min, sec, _ref;
          _ref = e.find('.time-since-status-change').text().split(':'), min = _ref[0], sec = _ref[1];
          return ((parseInt(min, 10) * 60) + parseInt(sec, 10)) * -1;
        }
      },
      sortBy: 'status'
    });
  };

  Serenade.Helpers.liStatus = function(klass, name, status) {
    var a;
    a = $('<a href="#"/>').text(name);
    if (status === name) a.addClass('active');
    p(a);
    return a.get(0);
  };

  Serenade.view('queueList', "ul[id=\"queues\" class=\"dropdown-menu\"]\n  - collection @queues\n      li\n        a[href=\"#\" event:click=showQueue!] @name");

  Serenade.view('agent', "div.agent.span2[class=@statusClass event:dblclick=details!]\n  span.extension @extension\n  span.username @username\n  span.state @state\n  span.status @status\n  span.time-since-status-change @timeSinceStatusChange\n  span.queue @queue\n  span.calls\n    - collection @calls\n      - view \"call\"\n  span.more-calls @moreCalls");

  Serenade.view('call', "div\n  .cid-name @cid_name\n  .cid-number @cid_number\n  .arrow \"&harr;\"\n  .destination @destination\n  .time-of-call-start @created\n  .answered @answered\n  .queue-name @queueName\n  .channel @channel\n  .uuid @uuid\n  a.calltap-uuid[href=\"#\"]\n    img[src=\"/images/ear.png\"]");

  Serenade.view('agentDetail', ".modal.fade\n  .modal-header\n    a.close[data-dismiss=\"modal\"] \"x\"\n    h3 @username \" - \" @id\n  .modal-body\n    ul.nav.nav-tabs\n      li\n        a[data-toggle=\"tab\" href=\"#agentDetailOverview\"] \"Overview\"\n      li\n        a[data-toggle=\"tab\" href=\"#agentDetailStatusLog\"] \"Status Log\"\n      li\n        a[data-toggle=\"tab\" href=\"#agentDetailStateLog\"] \"State Log\"\n      li\n        a[data-toggle=\"tab\" href=\"#agentDetailCallHistory\"] \"Call History\"\n    .tab-content\n      #agentDetailOverview.tab-pane.fade\n        h2 \"Status\"\n        .btn-group[data-toggle=\"buttons-radio\"]\n          button.btn.status-available[event:click=statusAvailable] \"Available\"\n          button.btn.status-available-on-demand[event:click=statusAvailableOnDemand] \"Available (On Demand)\"\n          button.btn.status-on-break[event:click=statusOnBreak] \"On Break\"\n          button.btn.status-logged-out[event:click=statusLoggedOut] \"Logged Out\"\n\n        h2 \"State\"\n        .btn-group[data-toggle=\"buttons-radio\"]\n          button.btn.state-waiting[event:click=stateWaiting] \"Ready\"\n          button.btn.state-idle[event:click=stateIdle] \"Wrap Up\"\n      #agentDetailStatusLog.tab-pane\n        \"Loading Status Log...\"\n      #agentDetailStateLog.tab-pane\n        \"Loading State Log...\"\n      #agentDetailCallHistory.tab-pane\n        \"Loading Call History...\"\n        \n  .modal-footer\n    button.calltap\n      i.icon-headphones\n      \"Tap\"");

  Serenade.view('agentStatusLog', "ul\n  - collection @statuses\n    li @created_at \" : \" @new_status");

  Serenade.view('agentStateLog', "ul\n  - collection @states\n    li @created_at \" : \" @new_state");

  Serenade.view('agentCallLog', "ul\n  - collection @calls\n    li @created_at \" : \" @new_state");

  AgentStatusLogController = (function() {

    AgentStatusLogController.name = 'AgentStatusLogController';

    function AgentStatusLogController() {}

    return AgentStatusLogController;

  })();

  Serenade.controller('agentStatusLog', AgentStatusLogController);

  AgentStateLogController = (function() {

    AgentStateLogController.name = 'AgentStateLogController';

    function AgentStateLogController() {}

    return AgentStateLogController;

  })();

  Serenade.controller('agentStateLog', AgentStateLogController);

  AgentCallLogController = (function() {

    AgentCallLogController.name = 'AgentCallLogController';

    function AgentCallLogController() {}

    return AgentCallLogController;

  })();

  Serenade.controller('agentCallLog', AgentCallLogController);

  AgentController = (function() {

    AgentController.name = 'AgentController';

    function AgentController() {}

    AgentController.prototype.details = function() {
      var view,
        _this = this;
      if (this.model.agent != null) this.model = this.model.agent;
      view = $(Serenade.render('agentDetail', this.model));
      view.on('shown', function() {
        var stateClass, statusClass;
        statusClass = statusOrStateToClass('status-', _this.model.status);
        stateClass = statusOrStateToClass('state-', _this.model.state);
        return $("button." + statusClass + ", button." + stateClass, view).button('reset').button('toggle');
      });
      view.on('hidden', function() {
        return view.remove();
      });
      view.modal('show');
      $('.nav-tabs a:first', view).tab('show');
      $('a[href="#agentDetailStatusLog"]').on('shown', function() {
        return socket.live('agent_status_log', {
          agent: _this.model.id,
          success: function(logs) {
            return $('#agentDetailStatusLog').html(Serenade.render('agentStatusLog', {
              statuses: new Serenade.Collection(logs)
            }));
          }
        });
      });
      $('a[href="#agentDetailStateLog"]').on('shown', function() {
        return socket.live('agent_state_log', {
          agent: _this.model.id,
          success: function(logs) {
            return $('#agentDetailStateLog').html(Serenade.render('agentStateLog', {
              states: new Serenade.Collection(logs)
            }));
          }
        });
      });
      return $('a[href="#agentDetailCallHistory"]').on('shown', function() {
        return socket.live('agent_call_log', {
          agent: _this.model.id,
          success: function(logs) {
            return $('#agentDetailCallLog').html(Serenade.render('agentCallLog', {
              calls: new Serenade.Collection(logs)
            }));
          }
        });
      });
    };

    return AgentController;

  })();

  Serenade.controller('agent', AgentController);

  AgentDetailController = (function() {

    AgentDetailController.name = 'AgentDetailController';

    function AgentDetailController() {}

    AgentDetailController.prototype.statusAvailable = function(event) {
      return this.submitStatus('Available', $(event.target));
    };

    AgentDetailController.prototype.statusAvailableOnDemand = function(event) {
      return this.submitStatus('Available (On Demand)', $(event.target));
    };

    AgentDetailController.prototype.statusOnBreak = function(event) {
      return this.submitStatus('On Break', $(event.target));
    };

    AgentDetailController.prototype.statusLoggedOut = function(event) {
      return this.submitStatus('Logged Out', $(event.target));
    };

    AgentDetailController.prototype.stateWaiting = function(event) {
      return this.submitState('Waiting', $(event.target));
    };

    AgentDetailController.prototype.stateIdle = function(event) {
      return this.submitState('Idle', $(event.target));
    };

    AgentDetailController.prototype.submitStatus = function(name, button) {
      button.button('loading');
      return socket.live('agent_status', {
        agent: this.model.id,
        status: name,
        success: function() {
          return button.button('reset').button('toggle');
        }
      });
    };

    AgentDetailController.prototype.submitState = function(name, button) {
      button.button('loading');
      return socket.live('agent_state', {
        agent: this.model.id,
        state: name,
        success: function() {
          return button.button('reset').button('toggle');
        }
      });
    };

    return AgentDetailController;

  })();

  Serenade.controller('agentDetail', AgentDetailController);

  QueueController = (function() {

    QueueController.name = 'QueueController';

    function QueueController() {}

    QueueController.prototype.showQueue = function(event) {
      var target,
        _this = this;
      target = $(event.target);
      return socket.live('queue_agents', {
        queue: target.text(),
        success: function(msg) {
          return p('queue_agents', msg);
        }
      });
    };

    return QueueController;

  })();

  Serenade.controller('queueList', QueueController);

  Call = (function(_super) {

    __extends(Call, _super);

    Call.name = 'Call';

    Call.property('legA');

    Call.property('legB');

    Call.belongsTo('agent', {
      as: (function() {
        return Agent;
      })
    });

    function Call() {
      if (!Call.__super__.constructor.apply(this, arguments)) {
        this.initialize.apply(this, arguments);
      }
    }

    Call.prototype.initialize = function() {
      return p.apply(null, ['initialize Call'].concat(__slice.call(arguments)));
    };

    return Call;

  })(Serenade.Model);

  Agents = new Serenade.Collection([]);

  Agent = (function(_super) {

    __extends(Agent, _super);

    Agent.name = 'Agent';

    Agent.property('extension');

    Agent.property('username');

    Agent.property('state');

    Agent.property('status');

    Agent.property('timeSinceStatusChange');

    Agent.property('queue');

    Agent.hasMany('calls', {
      as: (function() {
        return Call;
      })
    });

    Agent.property('statusClass', {
      get: (function() {
        return statusOrStateToClass('status-', this.status);
      }),
      dependsOn: ['status']
    });

    function Agent() {
      if (!Agent.__super__.constructor.apply(this, arguments)) {
        this.initialize.apply(this, arguments);
      }
    }

    Agent.prototype.initialize = function() {
      var tmp;
      p.apply(null, ['initialize Agent'].concat(__slice.call(arguments)));
      tmp = Serenade.render('agent', this);
      return $('#agents').isotope('insert', $(tmp));
    };

    return Agent;

  })(Serenade.Model);

  Queue = (function(_super) {

    __extends(Queue, _super);

    Queue.name = 'Queue';

    function Queue() {
      return Queue.__super__.constructor.apply(this, arguments);
    }

    Queue.property('name', {
      serialize: true
    });

    return Queue;

  })(Serenade.Model);

  $(function() {
    var server;
    initializeIsotope($('#agents'));
    server = $('#server').text();
    socket = new Rubyists.Socket({
      server: server
    });
    return socket.onopen = function() {
      socket.tag('live', function() {
        return p.apply(null, ['live'].concat(__slice.call(arguments)));
      });
      socket.tag('live:Agent', function(msg) {
        return new Agent(msg.body);
      });
      socket.tag('live:Call:create', function(msg) {
        var call;
        p('live:Call:create', msg);
        call = new Call(msg.body);
        p(call);
        p(call.agent);
        return p(call.agent.calls.push(call));
      });
      socket.tag('live:Call:update', function(msg) {
        var call;
        p('live:Call:update', msg);
        call = new Call(msg.body);
        p(call);
        p(call.agent);
        return p(call.agent.calls);
      });
      socket.tag('live:Call:delete', function(msg) {
        var call, calls, pendingDeletion, toDelete, toDeleteId, _i, _len, _results;
        p('live:Call:delete', msg);
        toDelete = new Call(msg.body);
        toDeleteId = toDelete.id;
        calls = toDelete.agent.calls;
        pendingDeletion = [];
        calls.forEach(function(call, index) {
          if (toDeleteId === call.id) return pendingDeletion.push(call);
        });
        _results = [];
        for (_i = 0, _len = pendingDeletion.length; _i < _len; _i++) {
          call = pendingDeletion[_i];
          _results.push(calls["delete"](call));
        }
        return _results;
      });
      return socket.live('subscribe', {
        name: $('#agent_name').text(),
        success: function() {
          var _this = this;
          socket.live('queues', {
            success: function(msg) {
              var queues;
              queues = new Serenade.Collection(msg.queues);
              return $('#queues').replaceWith(Serenade.render('queueList', {
                queues: queues
              }));
            }
          });
          return socket.live('agents', {
            success: function(msg) {
              var agentMsg, _i, _len, _ref, _results;
              _ref = msg.agents;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                agentMsg = _ref[_i];
                _results.push(new Agent(agentMsg));
              }
              return _results;
            }
          });
        }
      });
    };
  });

}).call(this);
