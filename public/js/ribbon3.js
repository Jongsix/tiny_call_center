// Generated by CoffeeScript 1.2.1-pre
(function() {
  var Agent, Call, CallController, ControlController, StateController, StatusController, meta, p,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  p = function() {
    var _ref;
    return (_ref = window.console) != null ? _ref.debug.apply(_ref, arguments) : void 0;
  };

  meta = {
    socket: null,
    calls: new Serenade.Collection([])
  };

  Serenade.view('status', "li#status.btn-group[data-toggle=\"buttons-radio\"]\n  button.btn.btn-success.available[event:click=statusAvailable!] \"Available\"\n  button.btn.btn-info.on-break[event:click=statusOnBreak!] \"On Break\"\n  button.btn.btn-primary.logged-out[event:click=statusLoggedOut!] \"Logged Out\"");

  Serenade.view('state', "li#state.btn-group[data-toggle=\"buttons-radio\"]\n  button.btn.btn-success.waiting[event:click=stateWaiting!] \"Ready\"\n  button.btn.btn-info.in-a-queue-call[disabled=\"disabled\"] \"In a queue call\"\n  button.btn.btn-primary.idle[event:click=stateIdle!] \"Wrap Up\"");

  Serenade.view('control', "li#control\n  button.btn.btn-primary[event:click=callMe!] \"Call Me\"\n  button.btn.btn-primary[event:click=makeCall!] \"Make Call\"\n  button.btn.btn-danger[event:click=logout!] \"Logout\"");

  Serenade.view('calls', ".container\n  #calls.span12\n    .row\n      - collection @calls\n        - view \"call\"");

  Serenade.view('call', ".call.alert.alert-info.span3\n  a.close[data-dismiss=\"alert\" event:click=hangup!] \"\u2715\"\n  .row\n    a.span1.transfer[href=\"#\" event:click=transfer!] \"Transfer\"\n    a.span1.dtmf[href=\"#\" event:click=dtmf!] \"DTMF\"\n    .span3.cid @display_cid\n    .span1.queue @queue\n    .span1.time @created_epoch");

  StatusController = (function() {

    StatusController.name = 'StatusController';

    function StatusController(options) {
      var _this = this;
      this.options = options;
      this.agent = this.options.agent;
      this.agent.bind('change:status', function(newStatus) {
        switch (newStatus) {
          case "Available":
            return $('.available', _this.view).button('toggle');
          case "On Break":
            return $('.on-break', _this.view).button('toggle');
          case "Logged Out":
            return $('.logged-out', _this.view).button('toggle');
        }
      });
    }

    StatusController.prototype.statusAvailable = function(event) {
      event.stopPropagation();
      return meta.socket.ribbon('status', {
        status: 'Available'
      });
    };

    StatusController.prototype.statusOnBreak = function() {
      event.stopPropagation();
      return meta.socket.ribbon('status', {
        status: 'On Break'
      });
    };

    StatusController.prototype.statusLoggedOut = function() {
      event.stopPropagation();
      return meta.socket.ribbon('status', {
        status: 'Logged Out'
      });
    };

    return StatusController;

  })();

  Serenade.controller('status', StatusController);

  StateController = (function() {

    StateController.name = 'StateController';

    function StateController(options) {
      var _this = this;
      this.options = options;
      this.agent = this.options.agent;
      this.agent.bind('change:state', function(newState) {
        switch (newState) {
          case "Idle":
            return $('.idle', _this.view).button('toggle');
          case "Waiting":
            return $('.waiting', _this.view).button('toggle');
          case "Receiving":
            return $('.receiving', _this.view).button('toggle');
          case "In a queue call":
            return $('.in-a-queue-call', _this.view).button('toggle');
        }
      });
    }

    StateController.prototype.stateWaiting = function() {
      event.stopPropagation();
      return meta.socket.ribbon('state', {
        state: 'Waiting'
      });
    };

    StateController.prototype.stateIdle = function() {
      event.stopPropagation();
      return meta.socket.ribbon('state', {
        state: 'Idle'
      });
    };

    return StateController;

  })();

  Serenade.controller('state', StateController);

  ControlController = (function() {

    ControlController.name = 'ControlController';

    function ControlController() {}

    ControlController.prototype.callMe = function() {
      return meta.socket.ribbon('call_me');
    };

    ControlController.prototype.makeCall = function() {
      return p("make call");
    };

    ControlController.prototype.logout = function() {
      return p("Log out");
    };

    return ControlController;

  })();

  Serenade.controller('control', ControlController);

  CallController = (function() {

    CallController.name = 'CallController';

    function CallController() {}

    CallController.prototype.hangup = function(event) {
      event.stopPropagation();
      return meta.socket.ribbon('hangup', {
        uuid: this.model.id,
        cause: 'EAR hangup'
      });
    };

    CallController.prototype.transfer = function(event) {
      return p('transfer', this);
    };

    CallController.prototype.dtmf = function(event) {
      return p('dtmf', this);
    };

    return CallController;

  })();

  Serenade.controller('call', CallController);

  Call = (function(_super) {

    __extends(Call, _super);

    Call.name = 'Call';

    Call.property('initializeRan');

    Call.property('queue');

    Call.property('display_cid');

    Call.property('created_epoch');

    function Call() {
      Call.__super__.constructor.apply(this, arguments);
      if (this.initializeRan == null) {
        if (typeof this.initialize === "function") {
          this.initialize.apply(this, arguments);
        }
      }
      this.initializeRan = true;
    }

    Call.prototype.initialize = function() {
      return p("Created Call:", this);
    };

    return Call;

  })(Serenade.Model);

  Agent = (function(_super) {

    __extends(Agent, _super);

    Agent.name = 'Agent';

    Agent.property('initializeRan');

    Agent.property('name');

    Agent.property('status');

    Agent.property('state');

    function Agent() {
      Agent.__super__.constructor.apply(this, arguments);
      if (this.initializeRan == null) {
        if (typeof this.initialize === "function") {
          this.initialize.apply(this, arguments);
        }
      }
      this.initializeRan = true;
    }

    Agent.prototype.initialize = function() {
      return p("Created Agent:", this);
    };

    return Agent;

  })(Serenade.Model);

  $(function() {
    var server;
    server = $('#console .server').text();
    meta.socket = new Rubyists.Socket({
      server: server
    });
    return meta.socket.onopen = function() {
      var agent;
      Serenade.clearCache();
      agent = new Agent({
        id: $('#console .extension').text(),
        name: $('#console .agent').text()
      });
      meta.socket.tag('ribbon:initialStatus', function(msg) {
        var initialCalls, raw, rawCall, _i, _len, _ref;
        p('init status', msg);
        raw = msg.body;
        agent.set(raw.agent);
        initialCalls = [];
        _ref = raw.calls;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          rawCall = _ref[_i];
          initialCalls.push(new Call(rawCall));
        }
        return meta.calls.update(initialCalls);
      });
      meta.socket.tag('ribbon:Call:create', function(msg) {
        var call, raw;
        p('call create', msg);
        raw = msg.body;
        call = new Call(raw);
        return meta.calls.push(call);
      });
      meta.socket.tag('ribbon:Call:update', function(msg) {
        return p('call update', msg);
      });
      meta.socket.tag('ribbon:Call:delete', function(msg) {
        var call, toDelete, _i, _len, _results;
        p('call delete', msg);
        toDelete = meta.calls.select(function(call) {
          return call.id === msg.body.uuid;
        });
        _results = [];
        for (_i = 0, _len = toDelete.length; _i < _len; _i++) {
          call = toDelete[_i];
          _results.push(meta.calls["delete"](call));
        }
        return _results;
      });
      meta.socket.tag('ribbon:Agent:update', function(msg) {
        p('ribbon:Agent:update', msg);
        return agent.set(msg.body);
      });
      meta.socket.tag('ribbon', function() {
        return p.apply(null, ['ribbon'].concat(__slice.call(arguments)));
      });
      return meta.socket.ribbon('subscribe', {
        agent: agent.name,
        success: function() {
          $('#status').replaceWith(Serenade.render('status', {
            agent: agent
          }));
          $('#state').replaceWith(Serenade.render('state', {
            agent: agent
          }));
          $('#control').replaceWith(Serenade.render('control'));
          $('#calls').replaceWith(Serenade.render('calls', {
            calls: meta.calls
          }));
          agent.trigger('change:status', agent.status);
          return agent.trigger('change:state', agent.state);
        }
      });
    };
  });

}).call(this);
