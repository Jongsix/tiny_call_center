#!/usr/bin/env ruby
# $VERBOSE = 2

require 'pp'
require 'cgi'
require 'json'
require 'uri'
require 'csv'
require 'time'

require 'em-websocket'
require_relative '../model/init'
require_relative '../options'

require "tiny_call_center/utils/fsr"
require "fsr/listener/inbound"
TCC::Log.level = Log4r.const_get(TCC.options.log_level)

require_relative '../lib/tiny_call_center/fs2ws/channel_relay'
require_relative '../lib/tiny_call_center/fs2ws/web_socket_utils'
require_relative '../lib/tiny_call_center/fs2ws/monitor'
require_relative '../lib/tiny_call_center/fs2ws/queue_reporter'
require_relative '../lib/tiny_call_center/fs2ws/web_socket_channel'
require_relative '../lib/tiny_call_center/fs2ws/web_socket_reporter'

$stdout.sync = true

# Need to make all of these env vars
command_socket_server = TinyCallCenter.options.command_server
port = TinyCallCenter.options.fs_port.to_i
auth = TinyCallCenter.options.fs_auth
agent_ws = TinyCallCenter.options.ribbon.server
live_ws = TinyCallCenter.options.listener.server

EM.run do
  FSR::Log.notice "Using #{TinyCallCenter.options.registration_servers} registration servers"
  TinyCallCenter.options.registration_servers.each do |monitor_server|
    FSR::Log.notice "Connecting to #{monitor_server}:#{port}"
    EventMachine.connect(monitor_server, port, TinyCallCenter::Monitor, host: monitor_server, port: port, auth: auth, output_format: 'plain')
  end

  FSR::Log.notice "Using #{command_socket_server}"
  EventMachine.connect(command_socket_server, port, TinyCallCenter::QueueReporter, host: command_socket_server, port: port, auth: auth, output_format: 'plain') do |reporter|
    FSR::Log.notice "Connecting to #{command_socket_server}:#{port}"

    FSR::Log.notice "Starting Agent WebSocket: #{agent_ws.host}:#{agent_ws.port}"
    EventMachine::WebSocket.start(host: agent_ws.host, port: agent_ws.port, debug: false) do |agent_websocket|
      FSR::Log.notice "Starting WebSocket Reporter: #{agent_websocket}"
      TinyCallCenter::WebSocketReporter.new(reporter, agent_websocket, command_socket_server)
    end

    FSR::Log.notice "Starting Live WebSocket: #{live_ws.host}:#{live_ws.port}"
    EventMachine::WebSocket.start(host: live_ws.host, port: live_ws.port, debug: false) do |websocket|
      FSR::Log.notice "Starting WebSocket Channel: #{websocket}"
      TinyCallCenter::WebSocketChannel.new(reporter, websocket, command_socket_server)
    end
  end
end
