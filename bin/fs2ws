#!/usr/bin/env ruby
# $VERBOSE = 2

require 'pp'
require 'cgi'
require 'json'
require 'csv'
require 'time'

require 'em-websocket'
require_relative '../model/init'
require_relative '../options'

require "fsr/listener/inbound"
require "fsr/command_socket"
FSR.load_all_commands

require_relative '../lib/tiny_call_center/fs2ws/channel_relay'
require_relative '../lib/tiny_call_center/fs2ws/web_socket_utils'
require_relative '../lib/tiny_call_center/fs2ws/monitor'
require_relative '../lib/tiny_call_center/fs2ws/queue_reporter'
require_relative '../lib/tiny_call_center/fs2ws/web_socket_channel'
require_relative '../lib/tiny_call_center/fs2ws/web_socket_reporter'
TCC::Log.level = Log4r.const_get(TCC.options.log_level)

$stdout.sync = true
EM.epoll?
# Need to make all of these env vars
command_socket_server = TinyCallCenter.options.command_server
port = TinyCallCenter.options.fs_port.to_i
auth = TinyCallCenter.options.fs_auth
EM.run do
  TinyCallCenter.options.registration_servers.each do |monitor_server|
    FSR::Log.notice "Connecting to #{monitor_server}"
    EventMachine.connect(monitor_server, port, TinyCallCenter::Monitor, host: monitor_server, port: port, auth: auth, output_format: 'plain')
  end

  EventMachine.connect(command_socket_server, port, TinyCallCenter::QueueReporter, host: command_socket_server, port: port, auth: auth, output_format: 'plain') do |reporter|
    FSR::Log.notice "Connecting to #{command_socket_server}:#{port}"
    EventMachine.start_server('0.0.0.0', 8080, EventMachine::WebSocket::Connection, {}) do |websocket|
      FSR::Log.notice "Starting WebSocket Reporter: #{websocket}"
      TinyCallCenter::WebSocketReporter.new(reporter, websocket, command_socket_server)
    end

    EventMachine.start_server('0.0.0.0', 8081, EventMachine::WebSocket::Connection, {}) do |websocket|
      FSR::Log.notice "Starting WebSocket Channel: #{websocket}"
      TinyCallCenter::WebSocketChannel.new(reporter, websocket, command_socket_server)
    end
  end
end
